# Minimal CMake version with BLAS and LAPACK support.
cmake_minimum_required(VERSION 3.18)
project(fortran_test)
enable_language(Fortran)

# The major use case of Fortran is to integrate with BLAS and LAPACK.
# CMake has built-in support for linking user's project with BLAS and
# LAPACK - simply invoke `find_package()` as follows.
find_package(BLAS REQUIRED)
find_package(LAPACK REQUIRED)

enable_testing()

# In the Fortran code, user defines the test functions with the following type
# signatures:
#
# ```fortran
# integer function saxpy_test() result(ret) bind(C)
# ```
# 
# In CMake, we use a variable to capture all the functions that we want to
# invoke for testing. If the function return an value that isn't 0, it is
# considered as a test failure.

set(BLAS_TESTS
  saxpy_test
  sgemv_test)

set(LAPACK_TESTS
  rand_mat_svd_test)

# We now create the c wrapper that handles command line arguments for testing.
# The xxx_main.c files are generated by CMake.
# The test functions are forward declared with extern.
create_test_sourcelist(_ blas_test_main.c ${BLAS_TESTS})
create_test_sourcelist(_ lapack_test_main.c ${LAPACK_TESTS})

# The test executable contains the entry program (xxx_main.c) and actual tests
# written in Fortan.
add_executable(blas_test blas_test_main.c blas_test.f90)
add_executable(lapack_test lapack_test_main.c lapack_test.f90)

# The executable must link with BLAS and LAPACK.
target_link_libraries(
  blas_test
  BLAS::BLAS
)
target_link_libraries(
  lapack_test
  BLAS::BLAS
  LAPACK::LAPACK
)

# Finally, we add every test function into the CTest test list.
foreach (test ${BLAS_TESTS})
  add_test(NAME ${test} COMMAND blas_test ${test})
endforeach ()
foreach (test ${LAPACK_TESTS})
  add_test(NAME ${test} COMMAND lapack_test ${test})
endforeach ()
